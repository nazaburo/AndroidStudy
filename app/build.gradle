plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'io.gitlab.arturbosch.detekt'
    id 'jacoco'
}

android {
    compileSdkVersion 31

    defaultConfig {
        applicationId "com.nazabu.androidstudy"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding true
        dataBinding true
        compose true
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.get()
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
        unitTests.returnDefaultValues = true
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/licenses/**']
        }
        resources {
            excludes += ['META-INF/licenses/**', 'META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }
}

dependencies {
    implementation libs.kotlin
    implementation libs.androidx.core
    implementation libs.androidx.appcompat
    implementation libs.androidx.constraintlayout
    implementation libs.bundles.lifecycle
    implementation libs.androidx.lifecycle.extensions
    implementation libs.androidx.lifecycle.runtime
    implementation libs.material

    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics

    implementation libs.hilt.android
    kapt libs.hilt.compiler

    implementation libs.timber

    // compose
    implementation libs.bundles.compose

    // Accompanists
    implementation libs.bundles.accompanist

    implementation libs.navigation.compose
    implementation libs.hilt.navigation.compose

    testImplementation libs.junit
    androidTestImplementation libs.androidx.test
    androidTestImplementation libs.androidx.test.espress

    // UI Tests
    androidTestImplementation libs.androidx.test.compose
}

kapt {
    correctErrorTypes true
}

//apply from: './jacoco.gradle'

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled(true)
        html.enabled(true)
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}
